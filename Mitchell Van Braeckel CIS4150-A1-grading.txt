
Student Name: Mitchell Van Braeckel


    57.5/ 65 : total mark

## Question 1.7

    2/ 2 : recognition of the fact that without documentation it is
              difficult to apply test cases later
    1/ 1 : recognition that you may apply tests in a different context
    1/ 1 : any argument regarding quality

## Question 2.1

    2/ 2 : recognition that "annoyance" is a qualitative evaluation
    2/ 2 : recognition that bounding the problem to some maximum time
              period will
        allow measurement
    0/ 2 : recognition that there are more constraints at play here (cost,
        feasibility, etc) than simply the marketing department's concern

## Question 2.3

    2/ 2 : recognition that this check needs to be made into a clearly
              definable and testable goal
    2/ 2 : any clearly described strategy to select a value that can
              be used in verification OR a described strategy to use
              alpha/beta testing

## Question 2.5

    0/ 2 : identification of this as a safety property
	** The property is a safety property, in fact it is expressed in a negative form (”not to exclude any test that may reveal a possible fault.”), and indicates what cannot happen. 
	** A safe analysis has no optimistic inaccuracy; that is, it accepts only correct programs.


## Question 3.1

    1/ 2 : (part 1) both visibility and sensitivity (one mark each)
    1/ 1 : (part 2) feedback
    1/ 1 : (part 3) partition
    0/ 1 : (part 4) partition
    1/ 2 : (part 5) both feedback and visibility (one mark each)
    1/ 1 : (part 6) feedback
    1/ 1 : (part 7) visibility

        : penalty -- one half mark deducted for each additional incorrect
                principle mention for any question, however there is a
                minimum of zero for the question.


## Graph problem 1: llNewNode

	** The important thing is that the actual executable lines are identified in the right nodes.  Non-exectutable lines (variable declarations, brackets, comments, blanks, etc) can appear in any node, or can be omitted entirely with no penalty.
	** Most students probably are including the actual code in each node, but all that is really required is the line numbers.  As long as the line numbers are there and fully correct, full marks are given.


    2/ 2 : lines 18, 22, 25, 29 and 30 are identified within node(s)
            - line 20 will likely also be placed in the node, but it
              does not actually "control" anything.  For completeness
              it should be included, but there is no mark for this
    1.5/ 2 : there is only one basic block here, but our book pulls the
              function name node out, so either one node, or two
			  (one for the function name) is acceptable
            - one node with all lines
            - two nodes -- one for the function name, one for the rest
    1/ 1 : the final node (containing return) should be doubly circled.

## Graph problem 2: llAppend

    2/ 2 : a single branch (if statement) is identified
    3/ 3 : a single loop is identified, with link recurring back to the
              same point where the decision is made
            - the "p = p->next" statement should be in the body of the loop
    2/ 2 : two separate terminating nodes are identified, each with
              double circles
    1/ 1 : statement numbers identifying the branch, loop and terminus
              are correct

## Graph problem 3: llInsertByIndexOrder

    3/ 3 : three separate branches are identified and two are nested
    1/ 1 : the compound condition for the loop is broken into two
              different nodes
    4/ 4 : the links for the compound condition correctly travel between
              the portions of the condition, loop body and post-loop
              node correctly
    1/ 1 : four termini are identified, and reside within the right
              branch structure
    2/ 2 : all statement numbers not having to do with the branch at
            line 84 are correct


## Programming tasks - Python


    3/ 3 : test cases are provided, for A+/A/A-, B+/B/B-, C+/C/C-,
              D+/D/D-, F, evaluating the highest, lowest and midrange
              value for each letter

		** There was a miscommunication in the assignment here, as AHW said "15 cases", which is not enough to provide max/min/avg for each individual division (as there are 13 divisions).  As this statement was made in class, as long as there are 15 cases in some sensible organization, full marks are given.

    2/ 2 : code runs and prints output on standard out

    2/ 2 : test cases and results included in README


## Programming tasks - Java

    3/ 3 : 15 test cases are provided, for A+/A/A-, B+/B/B-, C+/C/C-,
              D+/D/D-, F, evaluating the highest, lowest and midrange
              value for each letter

    2/ 2 : code runs and prints output on standard out

    2/ 2 : a fixture (some use of @Before or @BeforeClass) is used
              in the code to set up.

    2/ 2 : test cases and results included in README
    

## Overall document quality
    
        : penalty (-5) if effort has been put into fixing any of
            the error discovered in either or both GPA calculator
            implementation
        : penalty (-1) for document format problems:
            - missing title
            - missing author name
        : penalty (up to -5) for lack of clarity in writing and/or
          poor spelling/grammar:
            - not using full sentences
            - clear lack of proof-reading
            - incorrect grammar
            - more than 1 spelling error per page
            - more than 3 spelling error per page (-2 in total for spelling)


